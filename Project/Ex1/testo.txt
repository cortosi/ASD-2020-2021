Linguaggio richiesto: C

-----------------------------------------------

Testo
Implementare una libreria che offre un algoritmo di ordinamento Merge-BinaryInsertion Sort. 
Con BinaryInsertion Sort ci riferiamo a una versione dell'algoritmo Insertion Sort in cui la posizione, all'interno della sezione ordinata del vettore,
    in cui inserire l'elemento corrente è determinata tramite ricerca binaria.
Il Merge-BinaryInsertion Sort è un algoritmo ibrido che combina Merge Sort e BinaryInsertion Sort.  
L'idea è di approfittare del fatto che il BinaryInsertion Sort può essere più veloce del Merge Sort quando la sottolista da ordinare è piccola. 
Ciò suggerisce di considerare una modifica del Merge Sort in cui le sottoliste di lunghezza k o inferiore sono ordinate usando il  
    BinaryInsertion Sort e sono poi combinate usando il meccanismo tradizionale di fusione del Merge Sort. 
Il valore del parametro k dovrà essere studiato e discusso nella relazione. Ad esempio, k=0 implica che Merge-BinaryInsertion Sort si comporta
    esattamente come il Merge Sort classico, mentre k>>0 aumenta l'utilizzo del BinaryInsertion Sort.
Il codice che implementa Merge-BinaryInsertion Sort deve essere generico. Inoltre, la libreria deve permettere di specificare (cioè deve accettare in input) il criterio secondo cui ordinare i dati.

--------------------------------------------
Unit Testing
Implementare gli unit-test per la libreria secondo le indicazioni suggerite nel documento Unit Testing.

Uso della libreria di ordinamento implementata
Il file records.csv che potete trovare (compresso) all'indirizzo
https://datacloud.di.unito.it/index.php/s/X7qC8JSLNRtLxPC
contiene 20 milioni di record da ordinare.
Ogni record è descritto su una riga e contiene i seguenti campi:

id: (tipo intero) identificatore univoco del record;
field1: (tipo stringa) contiene parole estratte dalla divina commedia,
potete assumere che i valori non contengano spazi o virgole;
field2: (tipo intero);
field3: (tipo floating point);

Il formato è un CSV standard: i campi sono separati da virgole; i record sono
separati da \n.
Usando l'algoritmo implementato, si ordinino i record (non è sufficiente ordinare i
singoli campi) contenuti nel file records.csv in ordine non decrescente secondo i valori contenuti nei tre campi "field" (cioè, per ogni valore di k, è necessario ripetere l'ordinamento tre volte, una volta per ciascun campo).
Si misurino i tempi di risposta variando il valore di k e si produca una breve relazione in cui si riportano i risultati ottenuti insieme a un loro commento. 
Dimostrare nella relazione come il valore di k dovrebbe essere scelto nella pratica. 
Nel caso l'ordinamento si protragga per più di 10 minuti potete interrompere l'esecuzione e riportare un fallimento dell'operazione. 
I risultati sono quelli che vi sareste aspettati? Se sì, perché? Se no, fate delle ipotesi circa il motivo per cui l'algoritmo non funziona come vi aspettate, verificatele e riportate quanto scoperto nella relazione.
Si ricorda che che il file records.csv NON DEVE ESSERE OGGETTO DI COMMIT SU GIT!